echo 1500000 | sudo tee /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq

cw@pi4cw:~ $ 7z b

7-Zip [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=en_GB.UTF-8,Utf16=on,HugeFiles=on,64 bits,4 CPUs LE)

LE
CPU Freq: - - - - - - - - -

RAM size:    3740 MB,  # CPU hardware threads:   4
RAM usage:    882 MB,  # Benchmark threads:      4

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       3952   341   1127   3845  |      73792   399   1578   6296
23:       3844   352   1114   3917  |      72455   399   1573   6269
24:       3722   373   1075   4003  |      71281   399   1567   6258
25:       3590   367   1116   4100  |      69577   399   1553   6192
----------------------------------  | ------------------------------
Avr:             358   1108   3966  |              399   1568   6254
Tot:             379   1338   5110
cw@pi4cw:~ $



cw@pi4cw:~/tinymembench $ ./tinymembench
tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   2615.7 MB/s (0.2%)
 C copy backwards (32 byte blocks)                    :   2620.0 MB/s (0.4%)
 C copy backwards (64 byte blocks)                    :   2617.3 MB/s (0.3%)
 C copy                                               :   2583.9 MB/s (0.2%)
 C copy prefetched (32 bytes step)                    :   2587.5 MB/s (0.3%)
 C copy prefetched (64 bytes step)                    :   2587.0 MB/s
 C 2-pass copy                                        :   2020.0 MB/s (0.2%)
 C 2-pass copy prefetched (32 bytes step)             :   2113.3 MB/s (0.1%)
 C 2-pass copy prefetched (64 bytes step)             :   2111.2 MB/s (0.1%)
 C fill                                               :   2963.0 MB/s (0.5%)
 C fill (shuffle within 16 byte blocks)               :   2962.4 MB/s (0.4%)
 C fill (shuffle within 32 byte blocks)               :   2957.9 MB/s (0.4%)
 C fill (shuffle within 64 byte blocks)               :   2961.3 MB/s (0.5%)
 ---
 standard memcpy                                      :   2581.2 MB/s
 standard memset                                      :   2958.5 MB/s (0.8%)
 ---
 NEON LDP/STP copy                                    :   2586.0 MB/s (0.2%)
 NEON LDP/STP copy pldl2strm (32 bytes step)          :   2580.9 MB/s
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   2581.3 MB/s (0.2%)
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   2591.5 MB/s (6.6%)
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   2593.1 MB/s (0.2%)
 NEON LD1/ST1 copy                                    :   2585.5 MB/s
 NEON STP fill                                        :   2960.1 MB/s (0.4%)
 NEON STNP fill                                       :   2623.6 MB/s (1.1%)
 ARM LDP/STP copy                                     :   2586.0 MB/s (0.3%)
 ARM STP fill                                         :   2957.3 MB/s (0.4%)
 ARM STNP fill                                        :   2646.2 MB/s (0.8%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :    717.5 MB/s (0.9%)
 NEON LDP/STP 2-pass copy (from framebuffer)          :    616.6 MB/s (0.4%)
 NEON LD1/ST1 copy (from framebuffer)                 :    753.6 MB/s (0.4%)
 NEON LD1/ST1 2-pass copy (from framebuffer)          :    663.2 MB/s (0.9%)
 ARM LDP/STP copy (from framebuffer)                  :    513.1 MB/s (1.0%)
 ARM LDP/STP 2-pass copy (from framebuffer)           :    497.4 MB/s (0.4%)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns
      2048 :    0.0 ns          /     0.0 ns
      4096 :    0.0 ns          /     0.0 ns
      8192 :    0.0 ns          /     0.0 ns
     16384 :    0.0 ns          /     0.0 ns
     32768 :    0.0 ns          /     0.0 ns
     65536 :    5.7 ns          /     8.9 ns
    131072 :    8.6 ns          /    11.9 ns
    262144 :   12.3 ns          /    15.8 ns
    524288 :   14.2 ns          /    18.1 ns
   1048576 :   26.8 ns          /    40.6 ns
   2097152 :   86.5 ns          /   125.5 ns
   4194304 :  116.7 ns          /   150.7 ns
   8388608 :  139.5 ns          /   171.7 ns
  16777216 :  151.1 ns          /   181.4 ns
  33554432 :  157.2 ns          /   187.0 ns
  67108864 :  168.5 ns          /   202.7 ns
cw@pi4cw:~/tinymembench $




cw@pi4cw:~ $ sudo hdparm -t /dev/mmcblk0p2 | grep Timing
 Timing buffered disk reads: 130 MB in  3.04 seconds =  42.81 MB/sec
cw@pi4cw:~ $
