cw@pi4cw:~ $ 7z b

7-Zip [64] 16.02 : Copyright (c) 1999-2016 Igor Pavlov : 2016-05-21
p7zip Version 16.02 (locale=en_GB.UTF-8,Utf16=on,HugeFiles=on,64 bits,4 CPUs LE)

LE
CPU Freq: - - - - - 256000000 - - -

RAM size:    3740 MB,  # CPU hardware threads:   4
RAM usage:    882 MB,  # Benchmark threads:      4

                       Compressing  |                  Decompressing
Dict     Speed Usage    R/U Rating  |      Speed Usage    R/U Rating
         KiB/s     %   MIPS   MIPS  |      KiB/s     %   MIPS   MIPS

22:       4049   354   1114   3940  |      87237   398   1869   7443
23:       3971   348   1162   4046  |      85956   399   1864   7437
24:       4027   366   1184   4331  |      84142   399   1851   7386
25:       3817   369   1180   4358  |      81754   398   1827   7276
----------------------------------  | ------------------------------
Avr:             359   1160   4169  |              399   1853   7386
Tot:             379   1506   5777






cw@pi4cw:~/tinymembench $ ./tinymembench
tinymembench v0.4.9 (simple benchmark for memory throughput and latency)

==========================================================================
== Memory bandwidth tests                                               ==
==                                                                      ==
== Note 1: 1MB = 1000000 bytes                                          ==
== Note 2: Results for 'copy' tests show how many bytes can be          ==
==         copied per second (adding together read and writen           ==
==         bytes would have provided twice higher numbers)              ==
== Note 3: 2-pass copy means that we are using a small temporary buffer ==
==         to first fetch data into it, and only then write it to the   ==
==         destination (source -> L1 cache, L1 cache -> destination)    ==
== Note 4: If sample standard deviation exceeds 0.1%, it is shown in    ==
==         brackets                                                     ==
==========================================================================

 C copy backwards                                     :   2728.1 MB/s (0.2%)
 C copy backwards (32 byte blocks)                    :   2727.2 MB/s (0.3%)
 C copy backwards (64 byte blocks)                    :   2729.1 MB/s (0.3%)
 C copy                                               :   2695.5 MB/s (0.4%)
 C copy prefetched (32 bytes step)                    :   2698.3 MB/s
 C copy prefetched (64 bytes step)                    :   2700.1 MB/s
 C 2-pass copy                                        :   2190.3 MB/s (0.7%)
 C 2-pass copy prefetched (32 bytes step)             :   2301.3 MB/s (0.2%)
 C 2-pass copy prefetched (64 bytes step)             :   2295.1 MB/s (0.4%)
 C fill                                               :   3123.6 MB/s (1.7%)
 C fill (shuffle within 16 byte blocks)               :   3114.7 MB/s (1.0%)
 C fill (shuffle within 32 byte blocks)               :   3102.1 MB/s (1.0%)
 C fill (shuffle within 64 byte blocks)               :   3128.1 MB/s (1.4%)
 ---
 standard memcpy                                      :   2710.0 MB/s (0.3%)
 standard memset                                      :   3122.5 MB/s (1.3%)
 ---
 NEON LDP/STP copy                                    :   2697.2 MB/s
 NEON LDP/STP copy pldl2strm (32 bytes step)          :   2684.6 MB/s (0.5%)
 NEON LDP/STP copy pldl2strm (64 bytes step)          :   2686.1 MB/s (0.2%)
 NEON LDP/STP copy pldl1keep (32 bytes step)          :   2712.3 MB/s (0.6%)
 NEON LDP/STP copy pldl1keep (64 bytes step)          :   2711.2 MB/s (0.2%)
 NEON LD1/ST1 copy                                    :   2696.1 MB/s (0.4%)
 NEON STP fill                                        :   3144.5 MB/s (1.5%)
 NEON STNP fill                                       :   2774.8 MB/s (1.4%)
 ARM LDP/STP copy                                     :   2695.1 MB/s (0.2%)
 ARM STP fill                                         :   3161.1 MB/s (1.8%)
 ARM STNP fill                                        :   2774.6 MB/s (1.0%)

==========================================================================
== Framebuffer read tests.                                              ==
==                                                                      ==
== Many ARM devices use a part of the system memory as the framebuffer, ==
== typically mapped as uncached but with write-combining enabled.       ==
== Writes to such framebuffers are quite fast, but reads are much       ==
== slower and very sensitive to the alignment and the selection of      ==
== CPU instructions which are used for accessing memory.                ==
==                                                                      ==
== Many x86 systems allocate the framebuffer in the GPU memory,         ==
== accessible for the CPU via a relatively slow PCI-E bus. Moreover,    ==
== PCI-E is asymmetric and handles reads a lot worse than writes.       ==
==                                                                      ==
== If uncached framebuffer reads are reasonably fast (at least 100 MB/s ==
== or preferably >300 MB/s), then using the shadow framebuffer layer    ==
== is not necessary in Xorg DDX drivers, resulting in a nice overall    ==
== performance improvement. For example, the xf86-video-fbturbo DDX     ==
== uses this trick.                                                     ==
==========================================================================

 NEON LDP/STP copy (from framebuffer)                 :    805.2 MB/s (0.5%)
 NEON LDP/STP 2-pass copy (from framebuffer)          :    685.8 MB/s (1.1%)
 NEON LD1/ST1 copy (from framebuffer)                 :    837.6 MB/s (0.3%)
 NEON LD1/ST1 2-pass copy (from framebuffer)          :    704.9 MB/s (0.6%)
 ARM LDP/STP copy (from framebuffer)                  :    576.9 MB/s (0.6%)
 ARM LDP/STP 2-pass copy (from framebuffer)           :    540.0 MB/s (0.6%)

==========================================================================
== Memory latency test                                                  ==
==                                                                      ==
== Average time is measured for random memory accesses in the buffers   ==
== of different sizes. The larger is the buffer, the more significant   ==
== are relative contributions of TLB, L1/L2 cache misses and SDRAM      ==
== accesses. For extremely large buffer sizes we are expecting to see   ==
== page table walk with several requests to SDRAM for almost every      ==
== memory access (though 64MiB is not nearly large enough to experience ==
== this effect to its fullest).                                         ==
==                                                                      ==
== Note 1: All the numbers are representing extra time, which needs to  ==
==         be added to L1 cache latency. The cycle timings for L1 cache ==
==         latency can be usually found in the processor documentation. ==
== Note 2: Dual random read means that we are simultaneously performing ==
==         two independent memory accesses at a time. In the case if    ==
==         the memory subsystem can't handle multiple outstanding       ==
==         requests, dual random read has the same timings as two       ==
==         single reads performed one after another.                    ==
==========================================================================

block size : single random read / dual random read
      1024 :    0.0 ns          /     0.0 ns
      2048 :    0.0 ns          /     0.0 ns
      4096 :    0.0 ns          /     0.0 ns
      8192 :    0.0 ns          /     0.0 ns
     16384 :    0.0 ns          /     0.0 ns
     32768 :    0.0 ns          /     0.0 ns
     65536 :    4.7 ns          /     7.4 ns
    131072 :    7.2 ns          /     9.9 ns
    262144 :   10.3 ns          /    13.1 ns
    524288 :   11.9 ns          /    15.1 ns
   1048576 :   23.5 ns          /    35.9 ns
   2097152 :   81.2 ns          /   118.4 ns
   4194304 :  109.8 ns          /   142.6 ns
   8388608 :  130.9 ns          /   161.5 ns
  16777216 :  141.4 ns          /   170.4 ns
  33554432 :  146.9 ns          /   175.2 ns
  67108864 :  157.2 ns          /   189.0 ns
cw@pi4cw:~/tinymembench $


cw@pi4cw:~/tinymembench $ sudo hdparm -t /dev/mmcblk0p2 | grep Timing
 Timing buffered disk reads: 126 MB in  3.01 seconds =  41.82 MB/sec
cw@pi4cw:~/tinymembench $

cw@pi4cw:~ $ sudo hdparm -Tv /dev/mmcblk0p2

/dev/mmcblk0p2:
 readonly      =  0 (off)
 readahead     = 256 (on)
 geometry      = 965648/4/16, sectors = 61801472, start = 532480
 Timing cached reads:   2182 MB in  2.00 seconds = 1092.52 MB/sec
cw@pi4cw:~ $ sudo hdparm -Tv /dev/mmcblk0p2

/dev/mmcblk0p2:
 readonly      =  0 (off)
 readahead     = 256 (on)
 geometry      = 965648/4/16, sectors = 61801472, start = 532480
 Timing cached reads:   2144 MB in  2.00 seconds = 1073.55 MB/sec
cw@pi4cw:~ $ sudo hdparm -Tv /dev/mmcblk0p2

/dev/mmcblk0p2:
 readonly      =  0 (off)
 readahead     = 256 (on)
 geometry      = 965648/4/16, sectors = 61801472, start = 532480
 Timing cached reads:   2130 MB in  2.00 seconds = 1067.29 MB/sec
cw@pi4cw:~ $
